import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from google.colab import files
uploaded=files.upload()

2
df = pd.read_csv('Social_Network_Ads.csv')
df.head()

3
X=df[['Age','EstimatedSalary']]
Y=df['Purchased']

4
: from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
X_train, X_test, Y_train, Y_test=train_test_split(X,Y,test_size=0.25)
sc_X=StandardScaler()
X_train=sc_X.fit_transform(X_train)
X_test=sc_X.transform(X_test)
print(f'Train Dataset Size - X: {X_train.shape}, Y: {Y_train.shape}')
print(f'Test Dataset Size - X: {X_test.shape}, Y: {Y_test.shape}')


5
from sklearn.linear_model import LogisticRegression
lm= LogisticRegression(random_state=0, solver='lbfgs')
lm.fit(X_train,Y_train)
predictions = lm.predict(X_test)
plt.figure(figsize=(6,6))
sns.regplot(x=X_test[:,1],y=predictions, scatter_kws={'s':5})
plt.scatter(X_test[:,1],Y_test,marker='+')
plt.xlabel("User's Estimated Salary")
plt.ylabel('Ads Purchased')
plt.title('Registration Line Tracing')

6
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
cm = confusion_matrix(Y_test, predictions)
print(f'''Confusion martix : \n
+----------------+-----------------------+----------------------+
| | Positive Prediction | Negative Prediction |
-----------------+-----------------------+----------------------+
| Positive Class | True Positive (TP) {cm[0, 0]} | False Negative (FN) {cm[0,1]}|
-----------------+-----------------------+----------------------+
| Negative Class | False Positive (FP) {cm[1, 0]} | True Negative (TN) {cm[1,1]}|
+----------------+-----------------------+----------------------+\n'''
)
cr= classification_report(Y_test, predictions)
print('Classification Report : \n', cr)

7
from matplotlib.colors import ListedColormap
X_set, y_set = X_train, Y_train
X1, X2 = np.meshgrid(np.arange(start=X_set[:, 0].min() - 1, stop=X_set[:, 0].
↪max() + 1, step=0.01),
np.arange(start=X_set[:, 1].min() - 1, stop=X_set[:, 1].
↪max() + 1, step=0.01))
plt.figure(figsize=(9, 7.5))
plt.contourf(X1, X2, lm.predict(np.array([X1.ravel(), X2.ravel()]).T).
↪reshape(X1.shape), alpha=0.6, cmap=ListedColormap(('red', 'green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i,j in enumerate(np.unique(y_set)):
plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
color=ListedColormap(('red', 'green'))(i), label=j,␣
↪edgecolors='black', s=30)
plt.title('Logistic Regression (Training set)')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.legend()
plt.show()

8
